#!/bin/bash
# PostgreSQL backup and cleanup script
# Generated by Ansible

BACKUP_DIR="{{ postgresql_backup.path }}"
RETENTION_DAYS="{{ postgresql_backup.retention_days }}"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="postgresql_backup_${DATE}.sql"

# Create backup
echo "$(date): Starting PostgreSQL backup..." >> "${BACKUP_DIR}/backup.log"
{% if postgresql_admin_password | length > 0 %}
export PGPASSWORD="{{ postgresql_admin_password }}"
pg_dumpall -h localhost -U {{ postgresql_admin_user }} > "${BACKUP_DIR}/${BACKUP_FILE}"
{% else %}
pg_dumpall -h localhost -U {{ postgresql_admin_user }} > "${BACKUP_DIR}/${BACKUP_FILE}"
{% endif %}

if [ $? -eq 0 ]; then
    # Compress backup
    gzip "${BACKUP_DIR}/${BACKUP_FILE}"
    
    # Log successful backup creation
    echo "$(date): PostgreSQL backup created successfully: ${BACKUP_FILE}.gz" >> "${BACKUP_DIR}/backup.log"
    
    # Clean up old backups
    echo "$(date): Starting cleanup of old backups..." >> "${BACKUP_DIR}/backup.log"
    find "${BACKUP_DIR}" -name "postgresql_backup_*.sql.gz" -mtime +${RETENTION_DAYS} -delete
    
    # Log cleanup completion
    echo "$(date): Cleanup completed. Backups older than ${RETENTION_DAYS} days removed." >> "${BACKUP_DIR}/backup.log"
else
    # Log backup failure
    echo "$(date): ERROR: PostgreSQL backup failed!" >> "${BACKUP_DIR}/backup.log"
    exit 1
fi
